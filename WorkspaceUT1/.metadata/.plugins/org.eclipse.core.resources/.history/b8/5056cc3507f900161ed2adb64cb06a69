package chat;

import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

public class ClienteChat extends JFrame {
    
  /*  private JTextArea mensajesChat;
    private Socket socket;
    
    private int puerto;
    private String host;
    private String usuario;
    
    private DataOutputStream dos;
    private JTextField tfMensaje;
    */
	
	private int puerto;
    private String host;
    private String usuario;
    private JPanel contentPane;
	Socket socket;
	private JTextArea textArea;
	private DataOutputStream dos;
	private JTextField textField;
    
    public ClienteChat(){
        super("Cliente Chat");
    
        
        /*
        // Elementos de la ventana
        mensajesChat = new JTextArea();
        mensajesChat.setEnabled(true); // El area de mensajes del chat no se debe de poder editar
        mensajesChat.setEditable(false);
        mensajesChat.setLineWrap(true); // Las lineas se parten al llegar al ancho del textArea
        mensajesChat.setWrapStyleWord(true); // Las lineas se parten entre palabras (por los espacios blancos)
        JScrollPane scrollMensajesChat = new JScrollPane(mensajesChat);
        tfMensaje = new JTextField("");
        JButton btEnviar = new JButton("Enviar");
        
        
        // Colocacion de los componentes en la ventana
        Container c = this.getContentPane();
        c.setLayout(new GridBagLayout());
        
        GridBagConstraints gbc = new GridBagConstraints();
        
        gbc.insets = new Insets(20, 20, 20, 20);
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1;
        gbc.weighty = 1;
        gbc.fill = GridBagConstraints.BOTH;
        c.add(scrollMensajesChat, gbc);
        // Restaura valores por defecto
        gbc.gridwidth = 1;        
        gbc.weighty = 0;
        
        gbc.fill = GridBagConstraints.HORIZONTAL;        
        gbc.insets = new Insets(0, 20, 20, 20);
        
        gbc.gridx = 0;
        gbc.gridy = 1;
        c.add(tfMensaje, gbc);
        // Restaura valores por defecto
        gbc.weightx = 0;
        
        gbc.gridx = 1;
        gbc.gridy = 1;
        c.add(btEnviar, gbc);
        
        this.setBounds(400, 100, 400, 500);
        this.setVisible(true);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     
        
        */
        
        // Ventana de configuracion inicial
       // VentanaConfiguracion vc = new VentanaConfiguracion(this);
         host = "localhost";
         puerto = 1555;
       // usuario = vc.getUsuario();
         usuario = String.valueOf((int)(Math.random()*999));
        
        System.out.println("Quieres conectarte a " + host + " en el puerto " + puerto + " con el nombre de ususario: " + usuario + ".");
        
        // Se crea el socket para conectar con el Sevidor del Chat
        try {
            socket = new Socket(host, puerto);
        } catch (UnknownHostException ex) {
            System.out.println("No se ha podido conectar con el servidor (" + ex.getMessage() + ").");
        } catch (IOException ex) {
        	System.out.println("No se ha podido conectar con el servidor (" + ex.getMessage() + ").");
        }
        /*
        // Accion para el boton enviar
        btEnviar.addActionListener(
      //  		new ConexionServidor(socket, tfMensaje, usuario)
        	new ActionListener(){
        		public void actionPerformed(ActionEvent e) {
    				try{
    					dos = new DataOutputStream(socket.getOutputStream());
    					dos.writeUTF(usuario + ": " + tfMensaje.getText() );
    				}
    				catch(Exception exc){
    					JOptionPane.showMessageDialog(new JFrame(), exc.getMessage(), "Excepción fatal:",
    					        JOptionPane.ERROR_MESSAGE);
    					exc.printStackTrace();
    				}
    			}
        	}
        );
        */
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 504, 485);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JButton btnEnviar = new JButton("Enviar");
		btnEnviar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try{
					dos = new DataOutputStream(socket.getOutputStream());
					dos.writeUTF(usuario + ": " + textField.getText() );
				}
				catch(Exception exc){
					JOptionPane.showMessageDialog(new JFrame(), exc.getMessage(), "Excepción fatal:",
					        JOptionPane.ERROR_MESSAGE);
					exc.printStackTrace();
				}
			}
		});
		btnEnviar.setBounds(389, 386, 89, 49);
		contentPane.add(btnEnviar);
		
		textField = new JTextField();
		textField.setBounds(10, 386, 369, 47);
		contentPane.add(textField);
		textField.setColumns(10);
		
		textArea = new JTextArea();
		textArea.setBounds(10, 11, 468, 351);
		contentPane.add(textArea);
		
		JSeparator separator = new JSeparator();
		separator.setBounds(10, 373, 468, 13);
		contentPane.add(separator);
    }
    
    /**
     * Recibe los mensajes del chat reenviados por el servidor
     */
    public void recibirMensajesServidor(){
        // Obtiene el flujo de entrada del socket
        DataInputStream entradaDatos = null;
        String mensaje;
        try {
            entradaDatos = new DataInputStream(socket.getInputStream());
        } catch (IOException ex) {
        	System.out.println("Error al crear el stream de entrada: " + ex.getMessage());
        } catch (NullPointerException ex) {
        	System.out.println("El socket no se creo correctamente. ");
        }
        
        // Bucle infinito que recibe mensajes del servidor
        boolean conectado = true;
        while (conectado) {
            try {
                mensaje = entradaDatos.readUTF();
                textArea.append(mensaje + System.lineSeparator());
            } catch (IOException ex) {
            	System.out.println("Error al leer del stream de entrada: " + ex.getMessage());
                conectado = false;
            } catch (NullPointerException ex) {
            	System.out.println("El socket no se creo correctamente. ");
                conectado = false;
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {     
        
        ClienteChat c = new ClienteChat();
        c.setVisible(true);
        c.recibirMensajesServidor();
    }
 
}